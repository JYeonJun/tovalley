# name: Deploy to AWS EC2

# on:
#   push:
#     branches:
#       - deploy/docker

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       # - name: Set up Docker
#       #   run: |
#       #     sudo apt-get update
#       #     sudo apt-get install -y docker.io
#       #     sudo systemctl start docker
#       #     sudo systemctl enable docker

#       # - name: Install Docker Compose
#       #   run: |
#       #     sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
#       #     sudo chmod +x /usr/local/bin/docker-compose

#       - name: Log in to Docker Hub
#         run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and Push Docker images
#         run: |
#           docker-compose -f docker-compose.yml build
#           docker-compose -f docker-compose.yml push

#       - name: SSH into EC2 and Deploy
#         uses: appleboy/ssh-action@v1.0.0
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_PRIVATE_KEY }}
#           # port: ${{ secrets.EC2_PORT }}
#           script: |
#             docker-compose -f /home/ubuntu/tovalley/docker-compose.yml up -d

# 이게 ec2 최신 배포
# name: Build and Deploy

# on:
#   push:
#     branches:
#       - deploy/docker

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Setup Docker Compose
#         run: |
#           sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#           sudo chmod +x /usr/local/bin/docker-compose

#       - name: Log in to Docker Hub
#         run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and Push tovalley-react Docker Image
#         working-directory: ./tovalley-react
#         run: |
#           docker build -t jeongyeonjun/tovalley-react:latest .
#           docker push jeongyeonjun/tovalley-react:latest

#       - name: Build and Push tovalley-server Docker Image
#         working-directory: ./tovalley-server
#         run: |
#           docker build -t jeongyeonjun/tovalley-server:latest .
#           docker push jeongyeonjun/tovalley-server:latest

#       - name: Copy docker-compose.yml to EC2
#         run: scp -i ${{ secrets.EC2_PRIVATE_KEY }} docker-compose.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/tovalley

#       - name: SSH into EC2 and Start Docker Compose
#         uses: appleboy/ssh-action@v1.0.0
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_PRIVATE_KEY }}
#           script: |
#             ssh -i ${{ secrets.EC2_PRIVATE_KEY }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cd ~/tovalley && docker-compose up -d"

name: Build and Deploy
on:
  push:
    branches:
      - deploy/docker

# https://github.com/actions/setup-java
# actions/setup-java@v2는 사용자 정의 배포를 지원하고 Zulu OpenJDK, Eclipse Temurin 및 Adopt OpenJDK를 기본적으로 지원합니다. v1은 Zulu OpenJDK만 지원합니다.
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: zulu
      - name: Pemission
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew clean build

      # UTC가 기준이기 때문에 한국시간으로 맞추려면 +9시간 해야 한다
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Show Current Time
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"

      # EB에 CD 하기 위해 추가 작성
      - name: Generate deployment package
        run: |
          mkdir deploy
          cp build/libs/*.jar deploy/application.jar
          cp Procfile deploy/Procfile
          cp -r .ebextensions deploy/.ebextensions
          cd deploy && zip -r deploy.zip .

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          application_name: tovalley-beanstalk # 엘리스틱 빈스톡 애플리케이션 이름!
          environment_name: Tovalley-beanstalk-env # 엘리스틱 빈스톡 환경 이름!
          version_label: aws-v5-${{steps.current-time.outputs.formattedTime}}
          region: ap-northeast-2
          deployment_package: deploy/deploy.zip
